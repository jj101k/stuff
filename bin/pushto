#!/usr/bin/env perl
use strict;
use warnings;
my $relative_path=$ARGV[0];
unless($relative_path) {
  print <<EOF;
$0 <relative path> [--make[=<foo>]] [--confirm]

Pulls the current HEAD to a git repository in another directory,
which is assumed to have the same name, eg:

$0 ../testing

...from the directory 'foo' would refer to ../../testing/foo
If you add --make, it will also run 'make' for you.
If you specify --make=<foo> then 'make <foo>' will be run instead

Setting --confirm will just ask for confirmation before continuing.
This can be useful in scripts or quick history replays where the
results might be destructive.
EOF
  exit(1);
}

use Getopt::Long;
my $make_command;
my $confirm;

my $result = GetOptions(
  "make=s" => \$make_command,
  "confirm" => \$confirm,
);

my $tail_command = $make_command? "make $make_command" : "true";

chomp(my $git_dir=`current-git-dir`);
chomp(my $git_branch=`current-git-branch`);
chomp(my $target_dir="$git_dir/../$relative_path/".`basename $git_dir`);

if($confirm) {
  print "About to push to $relative_path from $git_dir branch $git_branch. Continue [Yn] ";
  chomp(my $yn = <STDIN>);
  if($yn eq "n") {
    exit 2;
  }
}

# 0, 1 = device, inode = effective uid
my @wd_stat = stat($git_dir);
my @td_stat = stat($target_dir);

if($wd_stat[0] == $td_stat[0] and $wd_stat[1] == $td_stat[1]) {
  die "$relative_path: is the same as the working directory $git_dir\n";
}

chdir($target_dir) or die "$target_dir: $!\n";
unless(system("git pull $git_dir $git_branch && $tail_command") == 0) {
  print "Sorry, that didn't work. I'll give you a shell to fix it or whatever\n";
  $ENV{PS1} = '$ ';
  system($ENV{SHELL}, "-i");
  print "\nWant me to try again? [Yn] ";
  chomp(my $yn = <STDIN>);
  if($yn ne "n") {
    system("git pull $git_dir $git_branch && $tail_command");
  }
}
